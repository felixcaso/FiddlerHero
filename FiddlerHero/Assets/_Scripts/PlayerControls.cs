//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/_Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""6ed17a4f-7cea-4f5c-82f3-a4a6c38e5721"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c9c112ae-1446-435a-b4dc-a68e4ee9cbc1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""4e8cf6de-a68a-44d6-abe4-f7131a0e52c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""c2538616-5b75-4d35-870a-f3583f636018"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Test"",
                    ""type"": ""PassThrough"",
                    ""id"": ""760969ac-2a6a-4dd8-9253-e00b00020fec"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dance"",
                    ""type"": ""Button"",
                    ""id"": ""d1084eaf-e6be-4bae-b502-dd80d20d9c3c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Blue"",
                    ""type"": ""Button"",
                    ""id"": ""a3764280-b11a-4f69-b0d3-803f98420898"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""b98390fa-ba45-43f4-954d-98b81c26d5c1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f20181da-f370-4402-a230-6be9d7c49e02"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0e6f5f3c-154f-4387-95ab-f9915e57ef60"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""03ef57ed-8bbf-492a-aef7-f6f5a87c33e3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9a8e1b0e-459c-4c8a-8ca3-0233c6f29693"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""06b8ee78-5c6a-4fa4-9665-b7b6bd7e4c5f"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e99e4f0a-5bfc-4f03-bddd-a35e940a7e2d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e4f3c85-beb4-4425-a5e4-fb8726028b46"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d31a4dd-db8f-4a40-8696-e398cce26e39"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3db5f5af-60b2-47c9-9307-318ce2e808a4"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dance"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7fb9cd0d-fd37-4bd7-a7e3-52146c6d1421"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Blue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FiddlerHero"",
            ""id"": ""53dc1f97-aeea-4145-92f0-cec3c49c088b"",
            ""actions"": [
                {
                    ""name"": ""BlueButton"",
                    ""type"": ""Button"",
                    ""id"": ""afaee054-9271-4407-991e-ec1743e948ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RedButton"",
                    ""type"": ""Button"",
                    ""id"": ""dbf92203-1686-40b3-87ff-78d893bde454"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""YellowButton"",
                    ""type"": ""Button"",
                    ""id"": ""26acae1c-a56c-4741-ab2d-36f9b6fa08c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Green"",
                    ""type"": ""Button"",
                    ""id"": ""b57470a9-1664-4dc3-9eb9-b9e5bfce9b2d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fb29b350-f185-4761-9d32-bb54b1b04851"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BlueButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91abd8db-b096-48a9-8aab-538e31e2064a"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RedButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e8327c9-c961-4dff-9a3f-6121f5ed1af6"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YellowButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0ecd6e4-150b-4812-b008-ffde25a9cc9b"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Green"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_Move = m_Game.FindAction("Move", throwIfNotFound: true);
        m_Game_Jump = m_Game.FindAction("Jump", throwIfNotFound: true);
        m_Game_Look = m_Game.FindAction("Look", throwIfNotFound: true);
        m_Game_Test = m_Game.FindAction("Test", throwIfNotFound: true);
        m_Game_Dance = m_Game.FindAction("Dance", throwIfNotFound: true);
        m_Game_Blue = m_Game.FindAction("Blue", throwIfNotFound: true);
        // FiddlerHero
        m_FiddlerHero = asset.FindActionMap("FiddlerHero", throwIfNotFound: true);
        m_FiddlerHero_BlueButton = m_FiddlerHero.FindAction("BlueButton", throwIfNotFound: true);
        m_FiddlerHero_RedButton = m_FiddlerHero.FindAction("RedButton", throwIfNotFound: true);
        m_FiddlerHero_YellowButton = m_FiddlerHero.FindAction("YellowButton", throwIfNotFound: true);
        m_FiddlerHero_Green = m_FiddlerHero.FindAction("Green", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Game
    private readonly InputActionMap m_Game;
    private List<IGameActions> m_GameActionsCallbackInterfaces = new List<IGameActions>();
    private readonly InputAction m_Game_Move;
    private readonly InputAction m_Game_Jump;
    private readonly InputAction m_Game_Look;
    private readonly InputAction m_Game_Test;
    private readonly InputAction m_Game_Dance;
    private readonly InputAction m_Game_Blue;
    public struct GameActions
    {
        private @PlayerControls m_Wrapper;
        public GameActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Game_Move;
        public InputAction @Jump => m_Wrapper.m_Game_Jump;
        public InputAction @Look => m_Wrapper.m_Game_Look;
        public InputAction @Test => m_Wrapper.m_Game_Test;
        public InputAction @Dance => m_Wrapper.m_Game_Dance;
        public InputAction @Blue => m_Wrapper.m_Game_Blue;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void AddCallbacks(IGameActions instance)
        {
            if (instance == null || m_Wrapper.m_GameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Test.started += instance.OnTest;
            @Test.performed += instance.OnTest;
            @Test.canceled += instance.OnTest;
            @Dance.started += instance.OnDance;
            @Dance.performed += instance.OnDance;
            @Dance.canceled += instance.OnDance;
            @Blue.started += instance.OnBlue;
            @Blue.performed += instance.OnBlue;
            @Blue.canceled += instance.OnBlue;
        }

        private void UnregisterCallbacks(IGameActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Test.started -= instance.OnTest;
            @Test.performed -= instance.OnTest;
            @Test.canceled -= instance.OnTest;
            @Dance.started -= instance.OnDance;
            @Dance.performed -= instance.OnDance;
            @Dance.canceled -= instance.OnDance;
            @Blue.started -= instance.OnBlue;
            @Blue.performed -= instance.OnBlue;
            @Blue.canceled -= instance.OnBlue;
        }

        public void RemoveCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActions instance)
        {
            foreach (var item in m_Wrapper.m_GameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActions @Game => new GameActions(this);

    // FiddlerHero
    private readonly InputActionMap m_FiddlerHero;
    private List<IFiddlerHeroActions> m_FiddlerHeroActionsCallbackInterfaces = new List<IFiddlerHeroActions>();
    private readonly InputAction m_FiddlerHero_BlueButton;
    private readonly InputAction m_FiddlerHero_RedButton;
    private readonly InputAction m_FiddlerHero_YellowButton;
    private readonly InputAction m_FiddlerHero_Green;
    public struct FiddlerHeroActions
    {
        private @PlayerControls m_Wrapper;
        public FiddlerHeroActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @BlueButton => m_Wrapper.m_FiddlerHero_BlueButton;
        public InputAction @RedButton => m_Wrapper.m_FiddlerHero_RedButton;
        public InputAction @YellowButton => m_Wrapper.m_FiddlerHero_YellowButton;
        public InputAction @Green => m_Wrapper.m_FiddlerHero_Green;
        public InputActionMap Get() { return m_Wrapper.m_FiddlerHero; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FiddlerHeroActions set) { return set.Get(); }
        public void AddCallbacks(IFiddlerHeroActions instance)
        {
            if (instance == null || m_Wrapper.m_FiddlerHeroActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FiddlerHeroActionsCallbackInterfaces.Add(instance);
            @BlueButton.started += instance.OnBlueButton;
            @BlueButton.performed += instance.OnBlueButton;
            @BlueButton.canceled += instance.OnBlueButton;
            @RedButton.started += instance.OnRedButton;
            @RedButton.performed += instance.OnRedButton;
            @RedButton.canceled += instance.OnRedButton;
            @YellowButton.started += instance.OnYellowButton;
            @YellowButton.performed += instance.OnYellowButton;
            @YellowButton.canceled += instance.OnYellowButton;
            @Green.started += instance.OnGreen;
            @Green.performed += instance.OnGreen;
            @Green.canceled += instance.OnGreen;
        }

        private void UnregisterCallbacks(IFiddlerHeroActions instance)
        {
            @BlueButton.started -= instance.OnBlueButton;
            @BlueButton.performed -= instance.OnBlueButton;
            @BlueButton.canceled -= instance.OnBlueButton;
            @RedButton.started -= instance.OnRedButton;
            @RedButton.performed -= instance.OnRedButton;
            @RedButton.canceled -= instance.OnRedButton;
            @YellowButton.started -= instance.OnYellowButton;
            @YellowButton.performed -= instance.OnYellowButton;
            @YellowButton.canceled -= instance.OnYellowButton;
            @Green.started -= instance.OnGreen;
            @Green.performed -= instance.OnGreen;
            @Green.canceled -= instance.OnGreen;
        }

        public void RemoveCallbacks(IFiddlerHeroActions instance)
        {
            if (m_Wrapper.m_FiddlerHeroActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFiddlerHeroActions instance)
        {
            foreach (var item in m_Wrapper.m_FiddlerHeroActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FiddlerHeroActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FiddlerHeroActions @FiddlerHero => new FiddlerHeroActions(this);
    public interface IGameActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnTest(InputAction.CallbackContext context);
        void OnDance(InputAction.CallbackContext context);
        void OnBlue(InputAction.CallbackContext context);
    }
    public interface IFiddlerHeroActions
    {
        void OnBlueButton(InputAction.CallbackContext context);
        void OnRedButton(InputAction.CallbackContext context);
        void OnYellowButton(InputAction.CallbackContext context);
        void OnGreen(InputAction.CallbackContext context);
    }
}
